package test.java.ua.lviv.iot.regex;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import main.java.ua.lviv.iot.regex.StringProcessor;

class StringProcessorTest {

  StringProcessor proc;

  @BeforeEach
  void beforeEach() {
    proc = new StringProcessor();
  }
  
  @Test
  void testNone() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan("",1),""
    );
  }
  
  @Test
  void testSheduleMonday() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–†–æ–∑–∫–ª–∞–¥: –Ü–†-12"
        + "–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: 03.03 - 09.03"
        + "–ù–∞–≤—á–∞–Ω–Ω—è –ø–æ: –ó–Ω–∞–º–µ–Ω–Ω–∏–∫—É"
        + "–ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:  –ß–∏—Å–µ–ª—å–Ω–∏–∫ - I –ø—ñ–¥–≥—Ä—É–ø–∞"
        + "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: 08.03 22:34:10"
        + "~~~~~~~~~~~~~"
        + "1 –ê–ª–≥–æ—Ä–∏—Ç–º—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —á–∞—Å—Ç–∏–Ω–∞ 2"
        + "üéì –í–µ—Ä–µ—Å –ó.–Ñ.,"
        + "üìç 322 I –Ω.–∫.,  –õ–µ–∫—Ü—ñ—è"
        + "üïì  8:30 ‚àí 10:05"
        + "~~~~~~~~~~~~~"
        + "2 –Ü–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º —Å–ø—Ä—è–º—É–≤–∞–Ω–Ω—è–º, —á–∞—Å—Ç–∏–Ω–∞ 2"
        + "üéì –ö—É–∑–∞–Ω –ì.–°.,"
        + "üìç 31 VII –Ω.–∫.,  –ü—Ä–∞–∫—Ç–∏—á–Ω–∞"
        + "üïì 10:20 ‚àí 11:55"
        + "~~~~~~~~~~~~~"
        + "3 –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º —Å–ø—Ä—è–º—É–≤–∞–Ω–Ω—è–º"
        + "üéì –ë—É–ª–∏–∫-–í–µ—Ä—Ö–æ–ª–∞ –°.–ó.,"
        + "üìç 315 VI –Ω.–∫.,  –ü—Ä–∞–∫—Ç–∏—á–Ω–∞"
        + "üïì 12:10 ‚àí 13:45",
          2),
        "–∫ " + "–Ω ");
  }
  
  
  @Test
  void testSheduleTuesday() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–†–æ–∑–∫–ª–∞–¥: –Ü–†-12"
        + "–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: 03.03 - 09.03"
        + "–ù–∞–≤—á–∞–Ω–Ω—è –ø–æ: –ó–Ω–∞–º–µ–Ω–Ω–∏–∫—É"
        + "–ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:  –ß–∏—Å–µ–ª—å–Ω–∏–∫ - I –ø—ñ–¥–≥—Ä—É–ø–∞"
        + "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: 08.03 22:38:48"
        + "~~~~~~~~~~~~~"
        + "1 –í–∏—â–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —á–∞—Å—Ç–∏–Ω–∞3 (–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑, —á–∞—Å—Ç–∏–Ω–∞ 2)"
        + "üéì –ù–∏—Ç—Ä–µ–±–∏—á –ó.–ú.,"
        + "üìç 321 I –Ω.–∫.,  –õ–µ–∫—Ü—ñ—è"
        + "üïì  8:30 ‚àí 10:05",
          1),
        "—á–∞—Å—Ç–∏–Ω–∞ " + "I ");
  }
  
  @Test
  void testSheduleWednesday() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–†–æ–∑–∫–ª–∞–¥: –Ü–†-12"
        + "–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: 03.03 - 09.03"
        + "–ù–∞–≤—á–∞–Ω–Ω—è –ø–æ: –ó–Ω–∞–º–µ–Ω–Ω–∏–∫—É"
        + "–ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:  –ß–∏—Å–µ–ª—å–Ω–∏–∫ - I –ø—ñ–¥–≥—Ä—É–ø–∞"
        + "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: 08.03 22:43:07"
        + "~~~~~~~~~~~~~"
        + "1 –§—ñ–∑–∏—á–Ω–µ –≤–∏—Ö–æ–≤–∞–Ω–Ω—è, —á–∞—Å—Ç–∏–Ω–∞ 2"
        + "üéì –ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        + "üìç  –ü—Ä–∞–∫—Ç–∏—á–Ω–∞"
        + "üïì  8:30 ‚àí 10:05"
        + "~~~~~~~~~~~~~"
        + "2 –ê–ª–≥–æ—Ä–∏—Ç–º—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —á–∞—Å—Ç–∏–Ω–∞ 2"
        + "üéì –í–µ—Ä–µ—Å –ó.–Ñ.,"
        + "üìç 218 I –Ω.–∫.,  –õ–µ–∫—Ü—ñ—è"
        + "üïì 10:20 ‚àí 11:55",
          1),
        "—á–∞—Å—Ç–∏–Ω–∞ " + "I ");
  }
  
  @Test
  void testCode() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "public static String readInputText() throws IOException {"
        + "    String out = \"\";"
        + "    try (Scanner scanner = new Scanner(System.in)) {"
        + "      System.out.print(\"Enter Text:\\n\");"
        + "      out += scanner.nextLine();"
        + "      System.out.print(\"Enter Number of times:\\n\");"
        + "      out += scanner.nextInt();"
        + "      return out;"
        + "    }"
        + "}",
          2),
          "scanner " + "System " + "out ");
  }
  
  @Test
  void testTestCode() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
            "@Test"
          + "void test1() {"
          + "Assertions.assertEquals("
          + "proc.findWordsRepeatingMoreTimesThan("
          + "    \"public static String readInputText() throws IOException {\""
          + "  + \"  String out = \\\"\\\";\""
          + "  + \"  try (Scanner scanner = new Scanner(System.in)) {\""
          + "  + \"    System.out.print(\\\"Enter Text:\\\\n\\\");\""
          + "  + \"    out += scanner.nextLine();\""
          + "  + \"    System.out.print(\\\"Enter Number of times:\\\\n\\\");\""
          + "  + \"    out += scanner.nextInt();\""
          + "  + \"    return out;\""
          + "  + \"  }\""
          + "  + \"}\","
          + "    2),"
          + "    \"System \""
          + "  + \"out \""
          + "  + \"scanner \");"
          + "  }",
          4),
        "out ");
  }
  
  @Test
  void testVeresPost1() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–ñ–∏–≤-–±—É–≤ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, —è–∫–∏–π –¥—É–∂–µ —Ö–æ—Ç—ñ–≤ —Å—Ç–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–º "
        + "Ôøº:) –°–∏–ª—å–Ω–æ —Ö–æ—Ç—ñ–≤, –∑–∞–ø–∞–ª–∏–≤ —Ü—ñ—î—é —ñ–¥–µ—î—é –±–∞–≥–∞—Ç–æ –ª—é–¥–µ–π —ñ —Ç–µ–ø–µ—Ä –Ω–∞ "
        + "—Ü—å–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–∞ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ —ñ –º–∞–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É "
        + "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ü–¢-–ø–æ–¥—ñ—ó —É –õ—å–≤–æ–≤—ñ Ôøº:)  –•—Ç–æ –∑ –Ü–¢-—à–Ω–∏–∫—ñ–≤ –≤–∂–µ "
        + " —î –≤ —Ç–µ–ª–µ–∑—ñ - —Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, —Ç–µ—Å—Ç—É–π—Ç–µ, –∑–∞–ª–∏—à–∞–π—Ç–µ –≤—ñ–¥–≥—É–∫–∏! "
        + "–Ü —á–∏–º –±—ñ–ª—å—à–µ –ø—ñ–¥–ø–∏—à–µ—Ç—å—Å—è –ª—é–¥–µ–π, —Ç–∏–º —à–≤–∏–¥—à–µ –≤–æ–Ω–∏ –∑—Ä–æ–±–ª—è—Ç—å "
        + "—Ü—å–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞ Ôøº:)",
        1),
          "–≤ " + "–±–æ—Ç–∞ "
        + "—ñ " + "–ª—é–¥–µ–π "
        + "–Ü–¢ " + "—Ö–æ—Ç—ñ–≤ "
        + "—Ü—å–æ–≥–æ ");
  }
  
  @Test
  void testVeresPost2() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "+3, —Å—É–º–∞—Ä–Ω–æ - 12 –ø—Ä–æ–≥—Ä–∞–º. –ù–µ–ø–æ–≥–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –∑–∞ "
        + "3 —Ä–æ–∫–∏ (–ø—Ä–∏–º–∞–∑—É—é—Å—å –¥–æ —Ä–æ–±–æ—Ç–∏ –≥—Ä—É–ø, –æ—á–æ–ª—é–≤–∞–Ω–∏—Ö Michael "
        + "Kropyva Maksym Nechepurenko —ñ Volodymyr Verhun)"
        + "–°–∫–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—Ç—ñ –∑–Ω–∞–π–æ–º–∏–º –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞–º - –Ω–µ—Ö–∞–π –ø—Ä–∏—Ö–æ–¥—è—Ç—å "
        + "–Ω–∞ –¥–Ω—ñ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π, –∑–∞–¥–∞—é—Ç—å –ø–∏—Ç–∞–Ω–Ω—è —ñ –æ–±–∏—Ä–∞—é—Ç—å "
        + "—â–æ —ó–º –Ω–∞–π–±—ñ–ª—å—à —Ü—ñ–∫–∞–≤–æ :)",
        1),
          "—ñ " + "—Ä–æ–±–æ—Ç–∏ ");
  }
  
  @Test
  void testLab1() {
    Assertions.assertEquals(
      proc.findWordsRepeatingMoreTimesThan(
        "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Å–æ–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É –º–æ–≤–æ—é Java —ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–ª–∞—Å "
      + "<–ù–∞–∑–≤–∞_—ñ–∑_–∑–∞–≤–¥–∞–Ω–Ω—è> —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç–∏–º–µ:     –î–æ–¥–∞—Ç–∫–æ–≤–∏—Ö "
      + "2 –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–ª—è, —è–∫—ñ –Ω–∞–π–∫—Ä–∞—â–µ –æ–ø–∏—Å—É—é—Ç—å –¥–∞–Ω–∏–π –∫–ª–∞—Å "
      + "(–¥–æ–¥–∞—Ç–∫–æ–≤–æ –¥–æ –ø–æ–ª—ñ–≤, –≤–∫–∞–∑–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ)"
      + "–ú–µ—Ç–æ–¥–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü–∏—Ö –ø–æ–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–æ–ª—è name "
      + "‚Äì getName() —ñ setName())   –°—Ç–∞—Ç–∏—á–Ω–µ –ø–æ–ª–µ (—á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–∏–ø—É)"
      + "–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É —Å–ª—ñ–¥ –¥–æ–¥–∞—Ç–∏ 2 –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –ø–æ–ª—è (protected)"
      + "–ü–æ–ª—è –∑ –ø—É–Ω–∫—Ç—ñ–≤ 3 —ñ 4 –º–∞—é—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏ –æ–ø–∏—Å—É–≤–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É"
      + "–î–µ—Ñ–æ–ª—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ —á–æ—Ç–∏—Ä—å–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ "
      + "(–ø–µ—Ä—à–∏–º–∏ —á–æ—Ç–∏—Ä—å–º–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ –∑ –ø.1) —ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ —É—Å—ñ–º–∞ –ø–æ–ª—è–º–∏. "
      + "–ü—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏ —Å–ª—ñ–¥ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—É–≤–∞—Ç–∏ –≤–∏–∫–ª–∏–∫ –≤ –æ–¥–∏–Ω "
      + "–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤ –∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é this —Ç–∞ —É–Ω–∏–∫–∞—Ç–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–¥—É"
      + "–ú–µ—Ç–æ–¥–∏:    toString - –≤–∏–≤–µ—Å—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—î–∫—Ç"
      + "–°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ printStaticField() - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ "
      + "–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—è (–¥–µ Field - –Ω–∞–∑–≤–∞ –ø–æ–ª—è)"
      + "–ú–µ—Ç–æ–¥ printField() - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—è"
      + "resetValues(–ø–∞—Ä–∞–º–µ—Ç—Ä–∏) - –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω—ñ "
      + "–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.  –†–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –∫–æ–¥ –º–∞—î –±—É—Ç–∏ –∑–∞–ª–∏—Ç–æ –≤ –≥—ñ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π! "
      + "–í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó –º–∞—Ç—å –±—É—Ç–∏ README —ñ .gitignore —Ñ–∞–π–ª. "
      + "–í main() –º–µ—Ç–æ–¥—ñ –≤–∏–∑–Ω–∞—á—ñ—Ç—å 3 –æ–±‚Äô—î–∫—Ç–∏ —Ç–∏–ø—É —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è "
      + "(–∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤) —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∏—Ö "
      + "–∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É toString() —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
      + "–º–µ—Ç–æ–¥—ñ–≤ printStaticField() —ñ printField() ",
        2),
        "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é "
      + "–≤ " + "–¥–æ–ø–æ–º–æ–≥–æ—é "
      + "—ñ " + "–∑ " + "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä "
      + "–∑–∞ " + "–ø–æ–ª—ñ–≤ " + "–ø–æ–ª—è "
      + "–ø—Ä–æ " + "—Ç–∞ " + "–∑–Ω–∞—á–µ–Ω–Ω—è ");
  }

  @Test
  void testLab2() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ç—Ä—å–æ—Ö —á–∞—Å—Ç–∏–Ω, –ø–µ—Ä—à–æ—é —á–∞—Å—Ç–∏–Ω–æ—é —î "
        + "–Ω–∞–º–∞–ª—é–≤–∞—Ç–∏ UML –¥—ñ–∞–≥—Ä–∞–º—É –∫–ª–∞—Å—ñ–≤   –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
        + "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –û–û–ü: –∫–ª–∞—Å–∏, —É—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è, –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º, "
        + "—ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—é. –ö–æ–∂–Ω–∏–π –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –Ω–∞–∑–≤—É, —è–∫–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–∏—Å—É—î "
        + "–π–æ–≥–æ —Å—É—Ç—å, —ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π —Å–∫–ª–∞–¥. –ê—Ç—Ä–∏–±—É—Ç–∏ —ñ –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—ñ–≤ —Å–ª—ñ–¥ "
        + "–≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ   –£—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "
        + "—Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –≤–æ–Ω–æ –º–∞—î —Å–µ–Ω—Å. –ü—Ä–∏ –∑–∞–ø–∏—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ "
        + "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ —â–æ–¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∫–æ–¥—É "
        + "java code convention. –ó–æ–±—Ä–∞–∂–∞—Ç–∏ –≤—Å—ñ –ø–∞—Ä–∏ set/get "
        + "(–∞–∫–∞ —Å–µ—Ç—Ç–µ—Ä–∏/–≥–µ—Ç—Ç–µ—Ä–∏) –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –∫–ª–∞—Å—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑ –º–µ—Ç–æ—é "
        + "—É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–∞—Å–º—ñ—á–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏   –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É —ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è "
        + "–º–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª—è–º–±–¥–∞-–≤–∏—Ä–∞–∑–∏   UML –¥—ñ–∞–≥—Ä–∞–º—É –∫–ª–∞—Å—ñ–≤ –º–æ–∂–Ω–∞ "
        + "–º–∞–ª—é–≤–∞—Ç–∏ —É draw.io, MS Visio –∞–±–æ –±—É–¥—å-—è–∫–æ–º—É —ñ–Ω—à–æ–º—É –∑—Ä—É—á–Ω–æ–º—É "
        + "—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä—ñ—ó. –†–µ–∑—É–ª—å—Ç—É—é—á—É –¥—ñ–∞–≥—Ä–∞–º—É —Å–ª—ñ–¥ –∑–∞–ª–∏—Ç–∏ –Ω–∞ Google Drive "
        + "—É —Ñ–æ—Ä–º–∞—Ç—ñ ClassDiagram_Programming_FirstName_LastName_Group.pdf "
        + "(https://drive.google.com/drive/u/0/folders/"
        + "1e63-TteHj5Q9-yPQYtu4J3aZOGgWs7ab "
        + "¬†—Ç–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—é)",
        2),
      "–¥—ñ–∞–≥—Ä–∞–º—É " + "–ø–æ—Ç—Ä—ñ–±–Ω–æ " + "—ñ "
    + "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ " + "–∫–ª–∞—Å—ñ–≤ ");
  }
  
  @Test
  void testLab3() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó ‚Ññ2"
        + "–ü—Ä–∏ –∑–∞–ø–∏—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ —â–æ–¥–æ "
        + "–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∫–æ–¥—É java code convention."
        + "–ö–ª–∞—Å–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–æ–∑–∫–ª–∞—Å—Ç–∏ –ø–æ –ø–∞–∫–µ—Ç–∞—Ö."
        + "–†–æ–±–æ—Ç–∞ –∑ –∫–æ–Ω—Å–æ–ª–ª—é –∞–±–æ –∫–æ–Ω—Å–æ–ª—å–Ω–µ –º–µ–Ω—é –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏."
        + "–í –∫–æ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –ª–∏—à —Ç—ñ –∫–ª–∞—Å–∏, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å—Å—è –Ω–∞ –¥—ñ–∞–≥—Ä–∞–º—ñ "
        + "–∫–ª–∞—Å—ñ–≤"
        + "–ê—Ç—Ä–∏–±—É—Ç–∏ –∫–ª–∞—Å—ñ–≤ —Ç–∞ —ó—Ö –≤–∏–¥–∏–º—ñ—Å—Ç—å –º–∞—é—Ç—å —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º–∏ –Ω–∞ "
        + "–¥—ñ–∞–≥—Ä–∞–º—ñ –∫–ª–∞—Å—ñ–≤. –¢–µ —Å–∞–º–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—ñ–≤"
        + "–î–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ª—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, "
        + "–¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –º–æ–≤—ñ Java"
        + "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ª—ñ–¥ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –º–µ—Ç–æ–¥—ñ"
        + "–ö–æ–¥ –Ω–µ–º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤/–∞—Ç—Ä–∏–±—É—Ç—ñ–≤. –î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à "
        + "–æ–¥–∏–Ω —Å—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ - main"
        + "–ö–æ–¥ –º–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ—á—É–≤–∞–ª—å–Ω–∏–π —Ç–∏–ø (Enum)"
        + "–ö–æ–¥ —Å–ª—ñ–¥ –∑–∞–ª–∏—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π, –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ —Å—Ç–≤–æ—Ä–∏–≤—à–∏ pull "
        + "request (—Ç–æ–±—Ç–æ –∫–æ–¥ —Å–ª—ñ–¥ –ø–∏—Å–∞—Ç–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É branch  –Ω–∞ –π–æ–≥–æ –æ—Å–Ω–æ–≤—ñ "
        + "–∑—Ä–æ–±–∏—Ç–∏ pull request)"
        + "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —ó—Ö —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º "
        + "–ª—è–º–±–¥–∞-–≤–∏—Ä–∞–∑—ñ–≤ (–æ—Ü—ñ–Ω—é—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ 0,3 –±–∞–ª–∞–º–∏ –ø—Ä–∏ –∑–¥–∞—á—ñ 15/02 "
        + "—ñ 18/02, –∑–∞ —É–º–æ–≤–∏ —â–æ —Å—Ç—É–¥–µ–Ω—Ç –ø–æ—è—Å–Ω–∏–≤ —è–∫ –ø—Ä–∞—Ü—é—é—Ç—å –ª—è–º–±–¥–∏)",
          2),
          "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è " + "–≤ "
        + "–Ω–∞ " + "–∑ " + "—Å–ª—ñ–¥ ");
  }
  
  @Test
  void testLab4() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–í–ê–ñ–õ–ò–í–û: –∑–¥–∞—á–∞ 4 —Ä–æ–±–æ—Ç–∏ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–º—ñ—Ç—ñ–≤ "
        + "–∑ 3-—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ –∑–¥–∞—á—ñ 3 —Ä–æ–±–æ—Ç–∏. –ó–¥–∞—á–∞ 4 —ñ 3 —Ä–æ–±–æ—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ "
        + "–Ω–µ–º–æ–∂–ª–∏–≤–∞!  –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –π–æ–≥–æ –∑–±—ñ—Ä–∫—É –º–æ–∂–Ω–∞ "
        + "–±—É–ª–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ¬†maven. –¢–∞–∫–æ–∂ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ "
        + "–ø–ª–∞–≥—ñ–Ω–∏ –≤ pom.xml "
        + "- –ø–ª–∞–≥—ñ–Ω Jacoco —è–∫–∏–π –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–¥—É —Ç–µ—Å—Ç–∞–º–∏ "
        + "(–≤ —Å–µ–∫—Ü—ñ—é build):"
        + "- –ø–ª–∞–≥—ñ–Ω FindBugs —è–∫–∏–π –∑–¥—ñ–π—Å–Ω—é—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É "
        + "—ñ –ø–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤ –∫–æ–¥—ñ (–≤ —Å–µ–∫—Ü—ñ—é reporting):"
        + "- –ø–ª–∞–≥—ñ–Ω PMD (–≤ —Å–µ–∫—Ü—ñ—é reporting):"
        + "- –ø–ª–∞–≥—ñ–Ω Checkstyle - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è code convention "
        + "(–≤ —Å–µ–∫—Ü—ñ—é reporting):"
        + "–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–ª—ñ–¥ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É mvn site —ñ "
        + "–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ –ø–∞–ø—Ü—ñ target/site "
        + "(–≤—ñ–¥–∫—Ä–∏–≤—à–∏ —Ñ–∞–π–ª index.html)"
        + "–í –∫–æ–¥—ñ —Å–ª—ñ–¥ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏, —è–∫—ñ –≤–∏—è–≤–ª—è—Ç—å –ø–ª–∞–≥—ñ–Ω–∏ FindBugs, "
        + "PMD —ñ Checkstyle (–æ–∫—Ä—ñ–º –ø–æ–º–∏–ª–æ–∫,–ø–æ–≤—è–∑–∞–Ω–∏—Ö –∑ –≤—ñ–¥—Å—Ç—É–Ω—ñ—Å—Ç—é –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤)"
        + "–ö–æ–¥ 4 —Ä–æ–±–æ—Ç–∏ —Å–ª—ñ–¥ –∑–∞–ª–∏—Ç–∏ –≤ —Ç–æ–π –∂ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π, —â–æ —ñ –∫–æ–¥ 3-—ó, –∞–ª–µ —Ü–µ "
        + "–º–∞—î –±—É—Ç–∏ –æ–∫—Ä–µ–º–∏–π pull request (–∞–ª–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ merge)"
        + "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ maven "
        + "(—Å–ª—ñ–¥ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑ –∫–æ–Ω—Å–æ–ª—ñ):"
        + "mvn archetype:generate -DgroupId=ua.lviv.iot -DartifactId=work "
        + "-Dversion=1.0-SNAPSHOT "
        + "-DarchetypeArtifactId=maven-archetype-quickstart "
        + "-DarchetypeVersion=1.0 -DinteractiveMode=false",
          4),
        "–≤ " + "—ñ " + "–∑ " + "—Ä–æ–±–æ—Ç–∏ ");
  }
  
  @Test
  void testLab5() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "—Ç–µ—Å—Ç–∏, –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤ 5-–π —Ä–æ–±–æ—Ç—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ –∫–æ–¥—É 4 —Ä–æ–±–æ—Ç–∏. "
        + "–ü–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É —Ç–µ—Å—Ç–∞–º–∏ –º–∞—î —Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 70%"
        + "–ö–æ–¥ —Ç–µ—Å—Ç—ñ–≤ —Å–ª—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–ª–∞–≥—ñ–Ω—ñ–≤ FindBugs, "
        + "PMD —ñ Checkstyle —Ç–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏"
        + "–ö–æ–º—ñ—Ç –≤ Github –º–∞—î ¬†–±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ —è–∫ –æ–∫—Ä–µ–º–∏–π pull request "
        + "(–∞–ª–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ merge) ",
          1),
          "–±—É—Ç–∏ " + "–º–∞—î "
        + "–≤ " + "–∫–æ–¥—É ");
  }
  
  @Test
  void testLab6() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–ù–µ—Ö–∞–π –≤ —Ä–∞–º–∫–∞—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó 3 –±—É–ª–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∫–ª–∞—Å "
        + "CrocodileManager, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±‚Äô—î–∫—Ç—ñ–≤, –ø–æ—Ö—ñ–¥–Ω–∏—Ö –≤—ñ–¥ –∫–ª–∞—Å—É "
        + "Crocodile. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É, –ø–æ—Ö—ñ–¥–Ω–æ–≥–æ –≤—ñ–¥  Crocodile —ñ –≤ —Å–∞–º–æ–º—É "
        + "–∫–ª–∞—Å—ñ Crocodile —Å–ª—ñ–¥ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–≤–∞ –º–µ—Ç–æ–¥–∏:"
        + "pubic String getHeaders() { ‚Ä¶ } - –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—ñ—á–∫—É –∑ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤, "
        + "–ø—Ä–∏—Å—É—Ç–Ω—ñ—Ö –≤ –¥–∞–Ω–æ–º—É –∫–ª–∞—Å—ñ, —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ–º—É —á–µ—Ä–µ–∑ –∫–æ–º—É"
        + "pubic String toCSV() { ... } - –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ "
        + "(–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤), –¥–∞–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞, —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ–≥–æ –∫–æ–º–∞–º–∏"
        + "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç–æ–¥—É toCSV –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å–∞—Ö –º–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç–∞–∫–æ–∂ —Ü–µ–π "
        + "–º–µ—Ç–æ–¥ —ñ–∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É. –ü–æ–ª—è, —è–∫—ñ –æ–≥–æ–ª–æ—à–µ–Ω—ñ –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É "
        + "–∫–ª–∞—Å—ñ, –º–∞—é—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏—Å—å –≤ —Å—Ç—Ä—ñ—á–∫—É, —Ä–æ–∑–¥—ñ–ª–µ–Ω—É –∫–æ–º–∞–º–∏, "
        + "–≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –∫–ª–∞—Å—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:"
        + "class Crocodile  {"
        + "    private String origin;‚Ä¶"
        + "    pubic String getHeaders() { "
        + "         return ‚Äúorigin‚Äù;}}"
        + "class Aligator extends Crocodile  {"
        + "    private int maxSpeed;‚Ä¶"
        + "    pubic String getHeaders() { "
        + "         return super.getHeaders() + ‚Äú,‚Äù + ‚ÄúmaxSpeed‚Äù;}}",
          4),
        "–≤ " + "Crocodile " + "String ");
  }
  
  @Test
  void testLab7() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ"
        + "–ü—Ä–∏ –∑–∞–ø–∏—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ —â–æ–¥–æ "
        + "–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∫–æ–¥—É java code convention."
        + "–ü–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–±–æ—Ç–æ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –∫–æ–¥—É —Å–ª—ñ–¥ –∑—Ä–æ–±–∏—Ç–∏ –∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–µ—Å—Ç—ñ–≤"
        + "–¢–∞–∫–æ–∂ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏—á–∏—Ç–∫–∏ —Ç–µ–∫—Å—Ç—É –∑ –∫–æ–Ω—Å–æ–ª—ñ –∑-–∑–∞ "
        + "–¥–æ–ø–æ–º–æ–≥–æ—é Scanner –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ main –º–µ—Ç–æ–¥ "
        + "main –º–µ—Ç–æ–¥ –º–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥ –≤–∏—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–æ–Ω—Å–æ–ª—ñ, –∞ "
        + "—Ç–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç, –º–µ—Ç–æ–¥ —è–∫–æ–≥–æ –º–∞—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ "
        + "—Ç–µ–∫—Å—Ç–æ–º –∞ —Ç–∞–∫–æ–∂ –º–µ—Ç–æ–¥ –≤–∏–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–∞ –∫–æ–Ω—Å–æ–ª—å (showResults)"
        + "–í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º —Å–ª—ñ–¥ —Ä–æ–±–∏—Ç–∏ –∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–±'—î–∫—Ç—ñ–≤ "
        + "(–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ, –æ–∫—Ä—ñ–º main –º–µ—Ç–æ–¥—É —Ç–∞ "
        + "readInputText)"
        + "–ö–æ–¥ —Å–ª—ñ–¥ –∑–∞–ª–∏—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π"
        + "–ü—Ä–æ–µ–∫—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —è–∫ –º–µ–π–≤–µ–Ω –ø—Ä–æ–µ–∫—Ç"
        + "–ö–æ–¥ –Ω–µ –º–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ 3-6 –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É",
          3),
        "–º–∞—î " + "–∑ " + "–º–µ—Ç–æ–¥ ");
  }
  
  @Test
  void testLab10() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Å–æ–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É –º–æ–≤–æ—é Python —ñ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–ª–∞—Å "
        + "<–ù–∞–∑–≤–∞_—ñ–∑_–∑–∞–≤–¥–∞–Ω–Ω—è> —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç–∏–º–µ:"
        + "–¢—Ä–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–ª—è, —è–∫—ñ –Ω–∞–π–∫—Ä–∞—â–µ –æ–ø–∏—Å—É—é—Ç—å –¥–∞–Ω–∏–π –∫–ª–∞—Å"
        + "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (—ñ–∑ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏)"
        + "–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"
        + "–ú–µ—Ç–æ–¥, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—ñ—á–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–ª–∞—Å—É"
        + "–°—Ç–∞—Ç–∏—á–Ω–µ –ø–æ–ª–µ"
        + "–°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—è"
        + "–í main() –º–µ—Ç–æ–¥—ñ –≤–∏–∑–Ω–∞—á—ñ—Ç—å 3 –æ–±‚Äô—î–∫—Ç–∏ —Ç–∏–ø—É —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è (–∑-–∑–∞ "
        + "–¥–æ–ø–æ–º–æ–≥–æ—é –ø–µ—Ä–µ–¥–∞—á—ñ —Ä—ñ–∑–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤) —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å "
        + "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∏—Ö –∑-–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É –∑ –ø—É–Ω–∫—Ç—É 4 –≤ –∫–æ–Ω—Å–æ–ª—å"
        + "–í–∞–∂–ª–∏–≤–æ: –∑–∞–≤–¥–∞–Ω–Ω—è –º–∞—î –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—å –≤—ñ–¥ —Ç–æ–≥–æ, —â–æ –±—É–ª–æ –Ω–∞ 1-–π "
        + "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ–π",
          2),
          "—ñ–∑ " + "—â–æ " + "–∑ "
        + "–∑–∞–≤–¥–∞–Ω–Ω—è ");
  }
  
  @Test
  void testLab11() {
    Assertions.assertEquals(
        proc.findWordsRepeatingMoreTimesThan(
          "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ ‚Ññ3 –Ω–∞ –º–æ–≤—ñ Python"
        + "–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –∫–æ–¥—É –π–æ–≥–æ —Å–ª—ñ–¥ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–æ –ø–∞–ø–∫–∞—Ö "
        + "–°–ª—ñ–¥ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—å code conventions –¥–ª—è –º–æ–≤–∏ Python"
        + "–ö–æ–¥ —Å–ª—ñ–¥ –∑–∞–ª–∏—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π"
        + "–†–æ–±–∏—Ç–∏ –ø–æ–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–æ!",
          1),
        "—Å–ª—ñ–¥ ");
  }

}
